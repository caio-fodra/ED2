#include "abbLista.h"


Arvore* cria_arvore_vazia (void) {
   return NULL;
}

void arvore_libera (Arvore* a) {
   if (a != NULL) {
      arvore_libera (a->esq);
      arvore_libera (a->dir);
      free(a);
   }
}

//========= Q1 - inserir
Arvore* inserir(Arvore *a, int v) {
   if (a == NULL) {
    a = (Arvore*)malloc(sizeof(Arvore));
    a->info = v;
    a->esq = NULL;
    a->dir = NULL;
  }
  else if (v < a->info) {
    a->esq = inserir (a->esq, v);
  }
  else {
    a->dir = inserir (a->dir, v);
  }

  return a;
  
}

//========= Q1 - remover
Arvore* remover (Arvore *a, int v) {
  
  if (a == NULL){ 
    return NULL; 
  }else {
    if (a->info > v)
      a->esq = remover (a->esq, v);
    else if (a->info < v)
      a->dir = remover (a->dir, v);
    else if ((a->esq == NULL) && (a->dir == NULL)) 
    { 
      free (a);
      a = NULL;
    }
    else if (a->dir == NULL) { 
    Arvore *tmp = a;
    a = a->esq;
    free (tmp);
  }
    else if (a->esq == NULL) { 
    Arvore *tmp = a;
    a = a->dir;
    free (tmp);
  }
    else { 
    Arvore *tmp = a->esq;
    while (tmp->dir != NULL)
    tmp = tmp->dir;
    a->info = tmp->info;
    tmp->info = v;
    a->esq = remover (a->esq, v); 
  }
    
    return a;
  }
}

//========= Q1 - busca
int buscar (Arvore *a, int v) {
   
  if (a == NULL) {
    return 0;
  }
  else if (v < a->info) {
    return buscar (a->esq, v);
  }
  else if (v > a->info) {
    return buscar (a->dir, v);
  }
  else {
    return 1;
  }
  
  return 1; 
    
}

//========= Q2 - min =====
int buscar_min (Arvore *a, int min) {
  
  /*recebe um mínimo de fora, pois devido
  a recursão, o valor de minimo seria perdido  
  */

  //se a for nulo, retorna o minimo
  //em caso de arvore vazia, o valor é o minimo recebido
  //se não, segue a arvore para a esquerda, onde estão os menores valores
  if (a == NULL) {
    return min;
  }
  else if (min > a->info) {
    min = a->info;
    return buscar_min (a->esq, min);
  }
  else {
    return min;
  }

  return min; 
    
}

//========= Q2 - max =====

int buscar_max (Arvore *a, int max) {

  /*recebe um maximo de fora, pois devido
  a recursão, o valor de maximo seria perdido  
  */

  //se a for nulo, retorna o maximo
  //em caso de arvore vazia, o valor é o maximo recebido
  //se não, segue a arvore para a direita, onde estão os maiores valores
  
  if (a == NULL) {
    return max;
  }
  else if (max < a->info) {
    max = a->info;
    return buscar_max (a->dir, max);
  }
  else {
    return max;
  }

  return max; 
    
}

//========= Q3 - imprime_decrescente =====
/*Imprimir a arvore InOrdem possiblilita imprimir em ordem descrescente, por começar na direita, depois a raiz e por fim a esquerda.
*/

void printInOrder(Arvore *a){
    if(a != NULL){
        printInOrder(a->dir);
        printf(" %d ", a->info);
        printInOrder(a->esq);
    }
}


//========= Q4 - maior ramo =====




void pre_order (Arvore* a) {
   if (a != NULL) {
      printf("%d ", a->info);
      pre_order (a->esq);
      pre_order (a->dir);
   } 
}

int main () {

  Arvore *a = cria_arvore_vazia ();
  
  a = inserir (a, 50);
  a = inserir (a, 30);
  a = inserir (a, 90);
  a = inserir (a, 20);
  a = inserir (a, 40);
  a = inserir (a, 95);
  a = inserir (a, 10);
  a = inserir (a, 35);
  a = inserir (a, 45);

  printf("\n");
  pre_order (a);	
  printf("\n");
  int min = INT_MAX;
  min = buscar_min (a, min);
  printf("valor minimo: %d\n", min);
  int max = INT_MIN;
  max = buscar_max(a, max);
  printf("valor maximo: %d\n\n", max);
  printf("Arvore em ordem decrescente:");
  printInOrder(a);
  printf("\n");

  printPaths(a);
  printf("\n");

  // ====== Q5 ====

  //A
  srand(time(NULL));
  int x = 0;
  Arvore *c = cria_arvore_vazia ();
  while( x < 100000 ){
    inserir(c, x);
    x++;
  }

  //B
  srand(time(NULL));
  int z = 0;
  Arvore *b = cria_arvore_vazia ();
  while( z < 100000 ){
    int v = 0;
    v = (rand()%99999);
    inserir(b, v);
    z++;
  }

  //A - EM ORDEM
  clock_t tInicio, tFim, tDecorrido;
  double tempo_gasto;
  printf("A:\n");
  tInicio = clock();
  int achou = buscar(c, 100000);
  tFim = clock();
  tempo_gasto = ( (double) (tFim - tInicio) ) / CLOCKS_PER_SEC;
  printf("Achou: %d\n", achou);
  printf("Tempo gasto: %lf s\n", tempo_gasto);
  tempo_gasto = 0;

  //===============================================

  //B - ALEATORIO
  printf("B:\n");
  tInicio = clock();
  achou = buscar(b, 100000);
  tFim = clock();
  tempo_gasto = ( (double) (tFim - tInicio) ) / CLOCKS_PER_SEC;
  printf("Achou: %d\n", achou);
  printf("Tempo gasto: %lf s\n", tempo_gasto);

//======================================
  /*
    JUSTIFICATIVA: Na A, a busca é linear já que devido as regras da construção da ABB é formada uma árvore degenerada(uma lista) e na B, devido a aleatoriedade é mais provavel que se forme uma árvore binária.
  */
  

  return 0;
}
